version: "3.3"
services:
  # proxy:
  #   image: traefik:v2.2
  #   networks:
  #     - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
  #     - default
  #     - rubrix
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   command:
  #     # Enable Docker in Traefik, so that it reads labels from Docker services
  #     - --providers.docker
  #     # Add a constraint to only use services with the label for this stack
  #     # from the env var TRAEFIK_TAG
  #     - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
  #     # Do not expose all Docker services, only the ones explicitly exposed
  #     - --providers.docker.exposedbydefault=false
  #     # Enable Docker Swarm mode
  #     - --providers.docker.swarmmode
  #     # Enable the access log, with HTTP requests
  #     - --accesslog
  #     # Enable the Traefik log, for configurations and errors
  #     - --log
  #     # Enable the Dashboard and API
  #     - --api
  #   deploy:
  #     placement:
  #       constraints:
  #         - node.role == manager
  #     labels:
  #       # Enable Traefik for this service, to make it available in the public network
  #       - traefik.enable=true
  #       # Use the traefik-public network (declared below)
  #       - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
  #       # Use the custom label "traefik.constraint-label=traefik-public"
  #       # This public Traefik will only use services with this label
  #       - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
  #       # traefik-http set up only to use the middleware to redirect to https
  #       - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.scheme=https
  #       - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.permanent=true
  #       # Handle host with and without "www" to redirect to only one of them
  #       # Uses environment variable DOMAIN
  #       # To disable www redirection remove the Host() you want to discard, here and
  #       # below for HTTPS
  #       - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
  #       - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.entrypoints=http
  #       # traefik-https the actual router using HTTPS
  #       - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
  #       - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.entrypoints=https
  #       - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.tls=true
  #       # Use the "le" (Let's Encrypt) resolver created below
  #       - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.tls.certresolver=le
  #       # Define the port inside of the Docker service to use
  #       - traefik.http.services.${STACK_NAME?Variable not set}-proxy.loadbalancer.server.port=80
  #       # Handle domain with and without "www" to redirect to only one
  #       # To disable www redirection remove the next line
  #       - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.regex=^https?://(www.)?(${DOMAIN?Variable not set})/(.*)
  #       # Redirect a domain with www to non-www
  #       # To disable it remove the next line
  #       - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.replacement=https://${DOMAIN?Variable not set}/$${3}
  #       # Redirect a domain without www to www
  #       # To enable it remove the previous line and uncomment the next
  #       # - traefik.http.middlewares.${STACK_NAME}-www-redirect.redirectregex.replacement=https://www.${DOMAIN}/$${3}
  #       # Middleware to redirect www, to disable it remove the next line
  #       - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.middlewares=${STACK_NAME?Variable not set}-www-redirect
  #       # Middleware to redirect www, and redirect HTTP to HTTPS
  #       # to disable www redirection remove the section: ${STACK_NAME?Variable not set}-www-redirect,
  #       - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.middlewares=${STACK_NAME?Variable not set}-www-redirect,${STACK_NAME?Variable not set}-https-redirect

  # db:
  #   image: postgres:14
  #   volumes:
  #     - app-db-data:/var/lib/postgresql/data/pgdata
  #   env_file:
  #     - .env
  #   environment:
  #     - PGDATA=/var/lib/postgresql/data/pgdata
  #   deploy:
  #     placement:
  #       constraints:
  #         - node.labels.${STACK_NAME?Variable not set}.app-db-data == true

  # restapi:
  #   image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}"
  #   # depends_on:
  #   #   - db
  #   env_file:
  #     - .env
  #   environment:
  #     - SERVER_NAME=${DOMAIN?Variable not set}
  #     - SERVER_HOST=https://${DOMAIN?Variable not set}
  #     # Allow explicit env var override for tests
  #     # - SMTP_HOST=${SMTP_HOST}
  #   build:
  #     context: ./services/restapi/src
  #     dockerfile: Dockerfile
  #     args:
  #       BACKEND_APP_MODULE: ${BACKEND_APP_MODULE-app.main:app}
  #       BACKEND_PRE_START_PATH: ${BACKEND_PRE_START_PATH-/app/prestart.sh}
  #       BACKEND_PROCESS_MANAGER: ${BACKEND_PROCESS_MANAGER-gunicorn}
  #       BACKEND_WITH_RELOAD: ${BACKEND_WITH_RELOAD-false}
  #       INSTALL_DEV: ${INSTALL_DEV-false}
  #   deploy:
  #     labels:
  #       - traefik.enable=true
  #       - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
  #       - traefik.http.routers.${STACK_NAME?Variable not set}-restapi-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`) || PathPrefix(`/webapp`)
  #       - traefik.http.services.${STACK_NAME?Variable not set}-restapi.loadbalancer.server.port=80
  #   networks:
  #     - rubrix

  dev-jupyter-notebook:
    env_file: .env
    container_name: ${USER_NAME-test}-dev-jupyter-notebook
    image: dev-notebook:latest
    ports:
      - "8889:8888"
    environment:
      JUPYTER_TOKEN: ${JUPYTER_TOKEN-docker}
    # env_file:
    #   - .env
    build:
      context: ./notebooks
      dockerfile: Dockerfile
    volumes:
      - ./notebooks:/src/notebooks
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['0', '1']
              capabilities: [gpu]
    networks:
      - rubrix

  rubrix:
    env_file: .env
    container_name: ${USER_NAME-test}-rubrix
    image: recognai/rubrix:latest
    restart: unless-stopped
    ports:
      - "6900:80"
    environment:
      ELASTICSEARCH: http://elasticsearch:9200
      # RUBRIX_LOCAL_AUTH_USERS_DB_FILE: /config/.users.yaml
      # RUBRIX_LOCAL_AUTH_DEFAULT_PASSWORD: ${RUBRIX_LOCAL_AUTH_DEFAULT_PASSWORD-$$2y$$05$$X1i7R1R7CeFyD/dxZ5ttu.FcJQbL2Gh30.86OxCxzTXl/BR.RO.6O}
    # volumes:
    #   - ./services/rubrix/src/config/.users.yaml:/config/.users.yaml
    networks:
      - rubrix

  elasticsearch:
    env_file: .env
    container_name: ${USER_NAME-test}-elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.11.1
    ports:
      - "9200:9200"
    environment:
      - node.name=elasticsearch
      - cluster.name=es-rubrix-local
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.routing.allocation.disk.threshold_enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - rubrix
    volumes:
      - elasticdata:/usr/share/elasticsearch/data

  kibana:
    env_file: .env
    container_name: ${USER_NAME-test}-kibana
    image: docker.elastic.co/kibana/kibana:7.11.1
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    networks:
      - rubrix

networks:
  # traefik-public:
  #   # Allow setting it to false for testing
  #   external: ${TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL-true}
  rubrix:
    driver: bridge

volumes:
  # app-db-data-test:
  elasticdata:
